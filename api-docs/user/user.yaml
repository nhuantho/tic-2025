openapi: 3.0.0
info:
  title: User Management API
  description: API for user management and authentication
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: https://api.user.com/v1
    description: Production server
  - url: https://staging-api.user.com/v1
    description: Staging server

paths:
  /users:
    get:
      summary: List users
      description: Retrieve a list of users
      tags:
        - Users
      parameters:
        - name: limit
          in: query
          description: Number of users to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of users to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by user status
          required: false
          schema:
            type: string
            enum: [active, inactive, suspended]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
    
    post:
      summary: Create user
      description: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '409':
          description: User already exists
        '422':
          description: Validation error
        '500':
          description: Internal server error

  /users/{user_id}:
    get:
      summary: Get user
      description: Retrieve a specific user by ID
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^[a-zA-Z0-9]{24}$'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal server error

    put:
      summary: Update user
      description: Update a user
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^[a-zA-Z0-9]{24}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '422':
          description: Validation error
        '500':
          description: Internal server error

    delete:
      summary: Delete user
      description: Delete a user
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^[a-zA-Z0-9]{24}$'
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Internal server error

  /auth/login:
    post:
      summary: User login
      description: Authenticate user and get access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
        '422':
          description: Validation error
        '500':
          description: Internal server error

  /auth/register:
    post:
      summary: User registration
      description: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: User already exists
        '422':
          description: Validation error
        '500':
          description: Internal server error

  /auth/refresh:
    post:
      summary: Refresh token
      description: Refresh access token using refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid refresh token
        '500':
          description: Internal server error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: User ID
          example: "507f1f77bcf86cd799439011"
        email:
          type: string
          format: email
          description: User email address
          example: "john.doe@example.com"
        username:
          type: string
          description: Username
          example: "johndoe"
        first_name:
          type: string
          description: First name
          example: "John"
        last_name:
          type: string
          description: Last name
          example: "Doe"
        status:
          type: string
          enum: [active, inactive, suspended]
          description: User status
          example: "active"
        role:
          type: string
          enum: [user, admin, moderator]
          description: User role
          example: "user"
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
          example: "2023-01-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: User last update timestamp
          example: "2023-01-01T12:05:00Z"
      required:
        - id
        - email
        - username
        - status
        - role
        - created_at

    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "john.doe@example.com"
        username:
          type: string
          description: Username
          example: "johndoe"
        password:
          type: string
          description: Password
          example: "securepassword123"
        first_name:
          type: string
          description: First name
          example: "John"
        last_name:
          type: string
          description: Last name
          example: "Doe"
        role:
          type: string
          enum: [user, admin, moderator]
          description: User role
          example: "user"
      required:
        - email
        - username
        - password
        - first_name
        - last_name

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "john.doe@example.com"
        username:
          type: string
          description: Username
          example: "johndoe"
        first_name:
          type: string
          description: First name
          example: "John"
        last_name:
          type: string
          description: Last name
          example: "Doe"
        status:
          type: string
          enum: [active, inactive, suspended]
          description: User status
          example: "active"
        role:
          type: string
          enum: [user, admin, moderator]
          description: User role
          example: "user"

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "john.doe@example.com"
        password:
          type: string
          description: Password
          example: "securepassword123"
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          description: JWT refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          description: Token type
          example: "bearer"
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        user:
          $ref: '#/components/schemas/User'

    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "john.doe@example.com"
        username:
          type: string
          description: Username
          example: "johndoe"
        password:
          type: string
          description: Password
          example: "securepassword123"
        first_name:
          type: string
          description: First name
          example: "John"
        last_name:
          type: string
          description: Last name
          example: "Doe"
      required:
        - email
        - username
        - password
        - first_name
        - last_name

    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
          description: JWT refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required:
        - refresh_token

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: [] 