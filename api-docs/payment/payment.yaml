openapi: 3.0.0
info:
  title: Payment API
  description: API for payment processing
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: https://api.payment.com/v1
    description: Production server
  - url: https://staging-api.payment.com/v1
    description: Staging server

paths:
  /payments:
    get:
      summary: List payments
      description: Retrieve a list of payments
      tags:
        - Payments
      parameters:
        - name: limit
          in: query
          description: Number of payments to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of payments to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by payment status
          required: false
          schema:
            type: string
            enum: [pending, completed, failed, cancelled]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  payments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payment'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
    
    post:
      summary: Create payment
      description: Create a new payment
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentRequest'
      responses:
        '201':
          description: Payment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '422':
          description: Validation error
        '500':
          description: Internal server error

  /payments/{payment_id}:
    get:
      summary: Get payment
      description: Retrieve a specific payment by ID
      tags:
        - Payments
      parameters:
        - name: payment_id
          in: path
          required: true
          description: Payment ID
          schema:
            type: string
            pattern: '^[a-zA-Z0-9]{24}$'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '404':
          description: Payment not found
        '500':
          description: Internal server error

    put:
      summary: Update payment
      description: Update a payment
      tags:
        - Payments
      parameters:
        - name: payment_id
          in: path
          required: true
          description: Payment ID
          schema:
            type: string
            pattern: '^[a-zA-Z0-9]{24}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePaymentRequest'
      responses:
        '200':
          description: Payment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '404':
          description: Payment not found
        '422':
          description: Validation error
        '500':
          description: Internal server error

    delete:
      summary: Cancel payment
      description: Cancel a payment
      tags:
        - Payments
      parameters:
        - name: payment_id
          in: path
          required: true
          description: Payment ID
          schema:
            type: string
            pattern: '^[a-zA-Z0-9]{24}$'
      responses:
        '200':
          description: Payment cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '404':
          description: Payment not found
        '409':
          description: Payment cannot be cancelled
        '500':
          description: Internal server error

  /payments/{payment_id}/refund:
    post:
      summary: Refund payment
      description: Refund a payment
      tags:
        - Payments
      parameters:
        - name: payment_id
          in: path
          required: true
          description: Payment ID
          schema:
            type: string
            pattern: '^[a-zA-Z0-9]{24}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '201':
          description: Refund created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        '404':
          description: Payment not found
        '409':
          description: Payment cannot be refunded
        '422':
          description: Validation error
        '500':
          description: Internal server error

components:
  schemas:
    Payment:
      type: object
      properties:
        id:
          type: string
          description: Payment ID
          example: "507f1f77bcf86cd799439011"
        amount:
          type: number
          format: decimal
          minimum: 0
          description: Payment amount in cents
          example: 1000
        currency:
          type: string
          description: Payment currency
          example: "USD"
        status:
          type: string
          enum: [pending, completed, failed, cancelled]
          description: Payment status
          example: "completed"
        description:
          type: string
          description: Payment description
          example: "Payment for order #12345"
        customer_id:
          type: string
          description: Customer ID
          example: "cust_123456789"
        created_at:
          type: string
          format: date-time
          description: Payment creation timestamp
          example: "2023-01-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Payment last update timestamp
          example: "2023-01-01T12:05:00Z"
      required:
        - id
        - amount
        - currency
        - status
        - created_at

    CreatePaymentRequest:
      type: object
      properties:
        amount:
          type: number
          format: decimal
          minimum: 1
          description: Payment amount in cents
          example: 1000
        currency:
          type: string
          description: Payment currency
          example: "USD"
        description:
          type: string
          description: Payment description
          example: "Payment for order #12345"
        customer_id:
          type: string
          description: Customer ID
          example: "cust_123456789"
        metadata:
          type: object
          description: Additional metadata
          example:
            order_id: "order_12345"
            source: "web"
      required:
        - amount
        - currency
        - customer_id

    UpdatePaymentRequest:
      type: object
      properties:
        description:
          type: string
          description: Payment description
          example: "Updated payment description"
        metadata:
          type: object
          description: Additional metadata
          example:
            order_id: "order_12345"
            source: "web"

    RefundRequest:
      type: object
      properties:
        amount:
          type: number
          format: decimal
          minimum: 1
          description: Refund amount in cents
          example: 1000
        reason:
          type: string
          description: Refund reason
          example: "Customer requested refund"
        metadata:
          type: object
          description: Additional metadata
          example:
            refund_reason: "customer_request"
      required:
        - amount

    Refund:
      type: object
      properties:
        id:
          type: string
          description: Refund ID
          example: "ref_123456789"
        payment_id:
          type: string
          description: Original payment ID
          example: "507f1f77bcf86cd799439011"
        amount:
          type: number
          format: decimal
          minimum: 0
          description: Refund amount in cents
          example: 1000
        reason:
          type: string
          description: Refund reason
          example: "Customer requested refund"
        status:
          type: string
          enum: [pending, completed, failed]
          description: Refund status
          example: "completed"
        created_at:
          type: string
          format: date-time
          description: Refund creation timestamp
          example: "2023-01-01T12:10:00Z"
      required:
        - id
        - payment_id
        - amount
        - status
        - created_at

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: [] 